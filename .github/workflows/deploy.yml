# The GitHub Actions file

name: Standard Build

on:
  push:
  # You should use this (instead of push) for large, time and resource-consuming codebases.
  # build.sh uses CI_SCHEDULE_PERIOD to decide if there has been changes recently that actually need
  # a rebuild.
  #
  workflow_dispatch:
    inputs:
      # These can be set when the build is invoked manually, from GH Actions.
      #
      # Set BOTH when you want to trigger a new release. The build script will 
      # switch Maven to the new release, deploy, tag git, move Maven to the new snapshot
      #
      NEW_RELEASE_VER:
        description: "New Release Version"
        required: false
      NEW_SNAPSHOT_VER:
        description: "New Snapshot Version"
        required: false
    
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Code checkout
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 21
        settings-path: ${{ github.workspace }} # location for the settings.xml file
  
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build
      env:
        CI_SECRETS_GIST_TOKEN: ${{secrets.SECRETS_GIST_TOKEN}}
        GIT_USER: ${{github.actor}}
        GIT_PASSWORD: ${{secrets.GITHUB_TOKEN}}
        CI_NEW_RELEASE_VER: ${{github.event.inputs.NEW_RELEASE_VER}}
        CI_NEW_SNAPSHOT_VER: ${{github.event.inputs.NEW_SNAPSHOT_VER}}
        CI_TRIGGERING_EVENT: ${{github.event_name}}
        # This is only set when using the act tool
        CI_IS_ACT_TOOL: ${{ secrets.CI_IS_ACT_TOOL }}
        # This also can be passed from act CLI
        CI_DEPLOY_BRANCHES: ${{ secrets.CI_DEPLOY_BRANCHES }}
  
      # We reuse the general CI scripts in knetminer-common, see https://github.com/Rothamsted/knetminer-common  
      run: 
        ./ci-build-v2/java-maven/build.sh
